// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_skill_queries.sql

package postgres

import (
	"context"
)

const deleteUserSkill = `-- name: DeleteUserSkill :exec
DELETE FROM user_skills
WHERE user_id = $1
    AND skill_id = $2
`

type DeleteUserSkillParams struct {
	UserID  string
	SkillID string
}

func (q *Queries) DeleteUserSkill(ctx context.Context, arg DeleteUserSkillParams) error {
	_, err := q.db.Exec(ctx, deleteUserSkill, arg.UserID, arg.SkillID)
	return err
}

const getUserSkill = `-- name: GetUserSkill :one
SELECT
    s.id AS id,
    s.name AS name,
    us.skill_level AS skill_level
FROM
    user_skills us
    JOIN skills s ON s.id = us.skill_id
WHERE
    us.user_id = $1
    AND s.id = $2
LIMIT 1
`

type GetUserSkillParams struct {
	UserID string
	ID     string
}

type GetUserSkillRow struct {
	ID         string
	Name       string
	SkillLevel int32
}

func (q *Queries) GetUserSkill(ctx context.Context, arg GetUserSkillParams) (GetUserSkillRow, error) {
	row := q.db.QueryRow(ctx, getUserSkill, arg.UserID, arg.ID)
	var i GetUserSkillRow
	err := row.Scan(&i.ID, &i.Name, &i.SkillLevel)
	return i, err
}

const getUserSkills = `-- name: GetUserSkills :many
SELECT
    s.id AS id,
    s.name AS name,
    us.skill_level AS skill_level
FROM
    user_skills us
    JOIN skills s ON s.id = us.skill_id
WHERE
    us.user_id = $1
`

type GetUserSkillsRow struct {
	ID         string
	Name       string
	SkillLevel int32
}

func (q *Queries) GetUserSkills(ctx context.Context, userID string) ([]GetUserSkillsRow, error) {
	rows, err := q.db.Query(ctx, getUserSkills, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSkillsRow
	for rows.Next() {
		var i GetUserSkillsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.SkillLevel); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUserSkill = `-- name: UpsertUserSkill :one
WITH upserted AS (
INSERT INTO user_skills (user_id, skill_id, skill_level)
        VALUES ($1, $2, $3)
    ON CONFLICT (user_id, skill_id)
        DO UPDATE SET
            skill_level = EXCLUDED.skill_level
        RETURNING
            skill_id, skill_level)
        SELECT
            u.skill_id AS id,
            s.name AS name,
            u.skill_level AS skill_level
        FROM
            upserted u
            JOIN skills s ON s.id = u.skill_id
`

type UpsertUserSkillParams struct {
	UserID     string
	SkillID    string
	SkillLevel int32
}

type UpsertUserSkillRow struct {
	ID         string
	Name       string
	SkillLevel int32
}

func (q *Queries) UpsertUserSkill(ctx context.Context, arg UpsertUserSkillParams) (UpsertUserSkillRow, error) {
	row := q.db.QueryRow(ctx, upsertUserSkill, arg.UserID, arg.SkillID, arg.SkillLevel)
	var i UpsertUserSkillRow
	err := row.Scan(&i.ID, &i.Name, &i.SkillLevel)
	return i, err
}
