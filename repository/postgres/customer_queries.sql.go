// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: customer_queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCustomer = `-- name: DeleteCustomer :exec
UPDATE
    customers
SET
    deleted_at = $3
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
`

type DeleteCustomerParams struct {
	TenantID  string
	ID        string
	DeletedAt pgtype.Timestamptz
}

func (q *Queries) DeleteCustomer(ctx context.Context, arg DeleteCustomerParams) error {
	_, err := q.db.Exec(ctx, deleteCustomer, arg.TenantID, arg.ID, arg.DeletedAt)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT
    id,
    first_name,
    last_name,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    customers
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
`

type GetCustomerParams struct {
	TenantID string
	ID       string
}

type GetCustomerRow struct {
	ID             string
	FirstName      string
	LastName       string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetCustomer(ctx context.Context, arg GetCustomerParams) (GetCustomerRow, error) {
	row := q.db.QueryRow(ctx, getCustomer, arg.TenantID, arg.ID)
	var i GetCustomerRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT
    id,
    first_name,
    last_name,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    customers
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
`

type GetCustomersRow struct {
	ID             string
	FirstName      string
	LastName       string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetCustomers(ctx context.Context, tenantID string) ([]GetCustomersRow, error) {
	rows, err := q.db.Query(ctx, getCustomers, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersRow
	for rows.Next() {
		var i GetCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.TenantID,
			&i.LastModifiedAt,
			&i.LastModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCustomer = `-- name: InsertCustomer :one
INSERT INTO customers (first_name, last_name, tenant_id, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, first_name, last_name, tenant_id, last_modified_at, last_modified_by
`

type InsertCustomerParams struct {
	FirstName      string
	LastName       string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type InsertCustomerRow struct {
	ID             string
	FirstName      string
	LastName       string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) InsertCustomer(ctx context.Context, arg InsertCustomerParams) (InsertCustomerRow, error) {
	row := q.db.QueryRow(ctx, insertCustomer,
		arg.FirstName,
		arg.LastName,
		arg.TenantID,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i InsertCustomerRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE
    customers
SET
    first_name = $3,
    last_name = $4,
    last_modified_at = $5,
    last_modified_by = $6
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
RETURNING
    id,
    first_name,
    last_name,
    tenant_id,
    last_modified_at,
    last_modified_by
`

type UpdateCustomerParams struct {
	TenantID       string
	ID             string
	FirstName      string
	LastName       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type UpdateCustomerRow struct {
	ID             string
	FirstName      string
	LastName       string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (UpdateCustomerRow, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.TenantID,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i UpdateCustomerRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
