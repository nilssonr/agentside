// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_presence_queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserPresence = `-- name: DeleteUserPresence :exec
DELETE FROM user_presences
WHERE user_id = $1
`

func (q *Queries) DeleteUserPresence(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUserPresence, userID)
	return err
}

const getUserPresence = `-- name: GetUserPresence :one
SELECT
    user_id,
    presence,
    last_modified_at,
    last_modified_by
FROM
    user_presences
WHERE
    user_id = $1
`

func (q *Queries) GetUserPresence(ctx context.Context, userID string) (UserPresence, error) {
	row := q.db.QueryRow(ctx, getUserPresence, userID)
	var i UserPresence
	err := row.Scan(
		&i.UserID,
		&i.Presence,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const upsertUserPresence = `-- name: UpsertUserPresence :one
INSERT INTO user_presences (user_id, presence, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id)
    DO UPDATE SET
        resence = EXCLUDED.presence, last_modified_at = EXCLUDED.last_modified_at, last_modified_by = EXCLUDED.last_modified_by
    RETURNING
        user_id, presence, last_modified_at, last_modified_by
`

type UpsertUserPresenceParams struct {
	UserID         string
	Presence       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpsertUserPresence(ctx context.Context, arg UpsertUserPresenceParams) (UserPresence, error) {
	row := q.db.QueryRow(ctx, upsertUserPresence,
		arg.UserID,
		arg.Presence,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i UserPresence
	err := row.Scan(
		&i.UserID,
		&i.Presence,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
