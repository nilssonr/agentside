// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: customer_phone_numbers_queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCustomerPhoneNumber = `-- name: DeleteCustomerPhoneNumber :exec
DELETE FROM customer_phone_numbers
WHERE customer_id = $1
    AND id = $2
`

type DeleteCustomerPhoneNumberParams struct {
	CustomerID string
	ID         string
}

func (q *Queries) DeleteCustomerPhoneNumber(ctx context.Context, arg DeleteCustomerPhoneNumberParams) error {
	_, err := q.db.Exec(ctx, deleteCustomerPhoneNumber, arg.CustomerID, arg.ID)
	return err
}

const getCustomerPhoneNumber = `-- name: GetCustomerPhoneNumber :one
SELECT
    id,
    phone_number,
    type,
    customer_id,
    last_modified_at,
    last_modified_by
FROM
    customer_phone_numbers
WHERE
    customer_id = $1
    AND id = $2
`

type GetCustomerPhoneNumberParams struct {
	CustomerID string
	ID         string
}

type GetCustomerPhoneNumberRow struct {
	ID             string
	PhoneNumber    string
	Type           string
	CustomerID     string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetCustomerPhoneNumber(ctx context.Context, arg GetCustomerPhoneNumberParams) (GetCustomerPhoneNumberRow, error) {
	row := q.db.QueryRow(ctx, getCustomerPhoneNumber, arg.CustomerID, arg.ID)
	var i GetCustomerPhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Type,
		&i.CustomerID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getCustomerPhoneNumbers = `-- name: GetCustomerPhoneNumbers :many
SELECT
    id,
    phone_number,
    type,
    customer_id,
    last_modified_at,
    last_modified_by
FROM
    customer_phone_numbers
WHERE
    customer_id = $1
`

type GetCustomerPhoneNumbersRow struct {
	ID             string
	PhoneNumber    string
	Type           string
	CustomerID     string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetCustomerPhoneNumbers(ctx context.Context, customerID string) ([]GetCustomerPhoneNumbersRow, error) {
	rows, err := q.db.Query(ctx, getCustomerPhoneNumbers, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomerPhoneNumbersRow
	for rows.Next() {
		var i GetCustomerPhoneNumbersRow
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.Type,
			&i.CustomerID,
			&i.LastModifiedAt,
			&i.LastModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCustomerPhoneNumber = `-- name: InsertCustomerPhoneNumber :one
INSERT INTO customer_phone_numbers (phone_number, type, customer_id, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, phone_number, type, customer_id, last_modified_at, last_modified_by
`

type InsertCustomerPhoneNumberParams struct {
	PhoneNumber    string
	Type           string
	CustomerID     string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type InsertCustomerPhoneNumberRow struct {
	ID             string
	PhoneNumber    string
	Type           string
	CustomerID     string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) InsertCustomerPhoneNumber(ctx context.Context, arg InsertCustomerPhoneNumberParams) (InsertCustomerPhoneNumberRow, error) {
	row := q.db.QueryRow(ctx, insertCustomerPhoneNumber,
		arg.PhoneNumber,
		arg.Type,
		arg.CustomerID,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i InsertCustomerPhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Type,
		&i.CustomerID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const updateCustomerPhoneNumber = `-- name: UpdateCustomerPhoneNumber :one
UPDATE
    customer_phone_numbers
SET
    phone_number = $3,
    type = $4,
    last_modified_at = $5,
    last_modified_by = $6
WHERE
    customer_id = $1
    AND id = $2
RETURNING
    id,
    phone_number,
    type,
    customer_id,
    last_modified_at,
    last_modified_by
`

type UpdateCustomerPhoneNumberParams struct {
	CustomerID     string
	ID             string
	PhoneNumber    string
	Type           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type UpdateCustomerPhoneNumberRow struct {
	ID             string
	PhoneNumber    string
	Type           string
	CustomerID     string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpdateCustomerPhoneNumber(ctx context.Context, arg UpdateCustomerPhoneNumberParams) (UpdateCustomerPhoneNumberRow, error) {
	row := q.db.QueryRow(ctx, updateCustomerPhoneNumber,
		arg.CustomerID,
		arg.ID,
		arg.PhoneNumber,
		arg.Type,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i UpdateCustomerPhoneNumberRow
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.Type,
		&i.CustomerID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
