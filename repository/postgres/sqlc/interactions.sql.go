// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: interactions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getInteraction = `-- name: GetInteraction :one
SELECT
    id,
    type,
    queue_id,
    state,
    state_modified_at,
    user_id,
    tenant_id,
    created_at
FROM
    interactions
WHERE
    tenant_id = $1
    AND id = $2
`

type GetInteractionParams struct {
	TenantID string
	ID       string
}

type GetInteractionRow struct {
	ID              string
	Type            string
	QueueID         string
	State           string
	StateModifiedAt pgtype.Timestamptz
	UserID          pgtype.Text
	TenantID        string
	CreatedAt       pgtype.Timestamptz
}

func (q *Queries) GetInteraction(ctx context.Context, arg GetInteractionParams) (GetInteractionRow, error) {
	row := q.db.QueryRow(ctx, getInteraction, arg.TenantID, arg.ID)
	var i GetInteractionRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.QueueID,
		&i.State,
		&i.StateModifiedAt,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
	)
	return i, err
}

const getInteractions = `-- name: GetInteractions :many
SELECT
    id,
    type,
    queue_id,
    state,
    state_modified_at,
    user_id,
    tenant_id,
    created_at
FROM
    interactions
WHERE
    tenant_id = $1
`

type GetInteractionsRow struct {
	ID              string
	Type            string
	QueueID         string
	State           string
	StateModifiedAt pgtype.Timestamptz
	UserID          pgtype.Text
	TenantID        string
	CreatedAt       pgtype.Timestamptz
}

func (q *Queries) GetInteractions(ctx context.Context, tenantID string) ([]GetInteractionsRow, error) {
	rows, err := q.db.Query(ctx, getInteractions, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInteractionsRow
	for rows.Next() {
		var i GetInteractionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.QueueID,
			&i.State,
			&i.StateModifiedAt,
			&i.UserID,
			&i.TenantID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInteraction = `-- name: InsertInteraction :one
INSERT INTO interactions (type, queue_id, state, state_modified_at, user_id, tenant_id, created_at)
    VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, type, queue_id, state, state_modified_at, user_id, tenant_id, created_at
`

type InsertInteractionParams struct {
	Type            string
	QueueID         string
	State           string
	StateModifiedAt pgtype.Timestamptz
	UserID          pgtype.Text
	TenantID        string
	CreatedAt       pgtype.Timestamptz
}

type InsertInteractionRow struct {
	ID              string
	Type            string
	QueueID         string
	State           string
	StateModifiedAt pgtype.Timestamptz
	UserID          pgtype.Text
	TenantID        string
	CreatedAt       pgtype.Timestamptz
}

func (q *Queries) InsertInteraction(ctx context.Context, arg InsertInteractionParams) (InsertInteractionRow, error) {
	row := q.db.QueryRow(ctx, insertInteraction,
		arg.Type,
		arg.QueueID,
		arg.State,
		arg.StateModifiedAt,
		arg.UserID,
		arg.TenantID,
		arg.CreatedAt,
	)
	var i InsertInteractionRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.QueueID,
		&i.State,
		&i.StateModifiedAt,
		&i.UserID,
		&i.TenantID,
		&i.CreatedAt,
	)
	return i, err
}
