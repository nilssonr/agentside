// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: customer_email_addresses.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCustomerEmailAddress = `-- name: DeleteCustomerEmailAddress :exec
DELETE FROM customer_email_addresses
WHERE customer_id = $1
    AND id = $2
`

type DeleteCustomerEmailAddressParams struct {
	CustomerID string
	ID         string
}

func (q *Queries) DeleteCustomerEmailAddress(ctx context.Context, arg DeleteCustomerEmailAddressParams) error {
	_, err := q.db.Exec(ctx, deleteCustomerEmailAddress, arg.CustomerID, arg.ID)
	return err
}

const getCustomerEmailAddress = `-- name: GetCustomerEmailAddress :one
SELECT
    id,
    email_address,
    type,
    customer_id,
    last_modified_at,
    last_modified_by
FROM
    customer_email_addresses
WHERE
    customer_id = $1
    AND id = $2
`

type GetCustomerEmailAddressParams struct {
	CustomerID string
	ID         string
}

func (q *Queries) GetCustomerEmailAddress(ctx context.Context, arg GetCustomerEmailAddressParams) (CustomerEmailAddress, error) {
	row := q.db.QueryRow(ctx, getCustomerEmailAddress, arg.CustomerID, arg.ID)
	var i CustomerEmailAddress
	err := row.Scan(
		&i.ID,
		&i.EmailAddress,
		&i.Type,
		&i.CustomerID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getCustomerEmailAddresses = `-- name: GetCustomerEmailAddresses :many
SELECT
    id,
    email_address,
    type,
    customer_id,
    last_modified_at,
    last_modified_by
FROM
    customer_email_addresses
WHERE
    customer_id = $1
`

func (q *Queries) GetCustomerEmailAddresses(ctx context.Context, customerID string) ([]CustomerEmailAddress, error) {
	rows, err := q.db.Query(ctx, getCustomerEmailAddresses, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerEmailAddress
	for rows.Next() {
		var i CustomerEmailAddress
		if err := rows.Scan(
			&i.ID,
			&i.EmailAddress,
			&i.Type,
			&i.CustomerID,
			&i.LastModifiedAt,
			&i.LastModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCustomerEmailAddress = `-- name: InsertCustomerEmailAddress :one
INSERT INTO customer_email_addresses(email_address, type, customer_id, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, email_address, type, customer_id, last_modified_at, last_modified_by
`

type InsertCustomerEmailAddressParams struct {
	EmailAddress   string
	Type           string
	CustomerID     string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) InsertCustomerEmailAddress(ctx context.Context, arg InsertCustomerEmailAddressParams) (CustomerEmailAddress, error) {
	row := q.db.QueryRow(ctx, insertCustomerEmailAddress,
		arg.EmailAddress,
		arg.Type,
		arg.CustomerID,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i CustomerEmailAddress
	err := row.Scan(
		&i.ID,
		&i.EmailAddress,
		&i.Type,
		&i.CustomerID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const updateCustomerEmailAddress = `-- name: UpdateCustomerEmailAddress :one
UPDATE
    customer_email_addresses
SET
    email_address = $3,
    type = $4,
    last_modified_at = $5,
    last_modified_by = $6
WHERE
    customer_id = $1
    AND id = $2
RETURNING
    id,
    email_address,
    type,
    customer_id,
    last_modified_at,
    last_modified_by
`

type UpdateCustomerEmailAddressParams struct {
	CustomerID     string
	ID             string
	EmailAddress   string
	Type           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpdateCustomerEmailAddress(ctx context.Context, arg UpdateCustomerEmailAddressParams) (CustomerEmailAddress, error) {
	row := q.db.QueryRow(ctx, updateCustomerEmailAddress,
		arg.CustomerID,
		arg.ID,
		arg.EmailAddress,
		arg.Type,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i CustomerEmailAddress
	err := row.Scan(
		&i.ID,
		&i.EmailAddress,
		&i.Type,
		&i.CustomerID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
