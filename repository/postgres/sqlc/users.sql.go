// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE
    users
SET
    deleted_at = $3
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
`

type DeleteUserParams struct {
	TenantID  string
	ID        string
	DeletedAt pgtype.Timestamptz
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.TenantID, arg.ID, arg.DeletedAt)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id,
    first_name,
    last_name,
    email_address,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    users
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
`

type GetUserParams struct {
	TenantID string
	ID       string
}

type GetUserRow struct {
	ID             string
	FirstName      string
	LastName       string
	EmailAddress   string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, arg.TenantID, arg.ID)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getUserByEmailAddress = `-- name: GetUserByEmailAddress :one
SELECT
    id,
    first_name,
    last_name,
    email_address,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    users
WHERE
    deleted_at IS NULL
    AND email_address = $1
`

type GetUserByEmailAddressRow struct {
	ID             string
	FirstName      string
	LastName       string
	EmailAddress   string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetUserByEmailAddress(ctx context.Context, emailAddress string) (GetUserByEmailAddressRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAddress, emailAddress)
	var i GetUserByEmailAddressRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    id,
    first_name,
    last_name,
    email_address,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    users
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
`

type GetUsersRow struct {
	ID             string
	FirstName      string
	LastName       string
	EmailAddress   string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetUsers(ctx context.Context, tenantID string) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.EmailAddress,
			&i.TenantID,
			&i.LastModifiedAt,
			&i.LastModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users(first_name, last_name, email_address, tenant_id, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, first_name, last_name, email_address, tenant_id, last_modified_at, last_modified_by
`

type InsertUserParams struct {
	FirstName      string
	LastName       string
	EmailAddress   string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type InsertUserRow struct {
	ID             string
	FirstName      string
	LastName       string
	EmailAddress   string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.TenantID,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    first_name = $3,
    last_name = $4,
    last_modified_at = $5,
    last_modified_by = $6
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
RETURNING
    id,
    first_name,
    last_name,
    email_address,
    tenant_id,
    last_modified_at,
    last_modified_by
`

type UpdateUserParams struct {
	TenantID       string
	ID             string
	FirstName      string
	LastName       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type UpdateUserRow struct {
	ID             string
	FirstName      string
	LastName       string
	EmailAddress   string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.TenantID,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
