// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queues.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteQueue = `-- name: DeleteQueue :exec
UPDATE
    queues
SET
    deleted_at = $3
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
`

type DeleteQueueParams struct {
	TenantID  string
	ID        string
	DeletedAt pgtype.Timestamptz
}

func (q *Queries) DeleteQueue(ctx context.Context, arg DeleteQueueParams) error {
	_, err := q.db.Exec(ctx, deleteQueue, arg.TenantID, arg.ID, arg.DeletedAt)
	return err
}

const getQueue = `-- name: GetQueue :one
SELECT
    id,
    name,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    queues
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
`

type GetQueueParams struct {
	TenantID string
	ID       string
}

type GetQueueRow struct {
	ID             string
	Name           string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetQueue(ctx context.Context, arg GetQueueParams) (GetQueueRow, error) {
	row := q.db.QueryRow(ctx, getQueue, arg.TenantID, arg.ID)
	var i GetQueueRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getQueues = `-- name: GetQueues :many
SELECT
    id,
    name,
    tenant_id,
    last_modified_at,
    last_modified_by
FROM
    queues
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
`

type GetQueuesRow struct {
	ID             string
	Name           string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetQueues(ctx context.Context, tenantID string) ([]GetQueuesRow, error) {
	rows, err := q.db.Query(ctx, getQueues, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQueuesRow
	for rows.Next() {
		var i GetQueuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TenantID,
			&i.LastModifiedAt,
			&i.LastModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertQueue = `-- name: InsertQueue :one
INSERT INTO queues (name, tenant_id, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, name, tenant_id, last_modified_at, last_modified_by
`

type InsertQueueParams struct {
	Name           string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type InsertQueueRow struct {
	ID             string
	Name           string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) InsertQueue(ctx context.Context, arg InsertQueueParams) (InsertQueueRow, error) {
	row := q.db.QueryRow(ctx, insertQueue,
		arg.Name,
		arg.TenantID,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i InsertQueueRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const updateQueue = `-- name: UpdateQueue :one
UPDATE
    queues
SET
    name = $3,
    last_modified_at = $4,
    last_modified_by = $5
WHERE
    deleted_at IS NULL
    AND tenant_id = $1
    AND id = $2
RETURNING
    id,
    name,
    tenant_id,
    last_modified_at,
    last_modified_by
`

type UpdateQueueParams struct {
	TenantID       string
	ID             string
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type UpdateQueueRow struct {
	ID             string
	Name           string
	TenantID       string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpdateQueue(ctx context.Context, arg UpdateQueueParams) (UpdateQueueRow, error) {
	row := q.db.QueryRow(ctx, updateQueue,
		arg.TenantID,
		arg.ID,
		arg.Name,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i UpdateQueueRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TenantID,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
