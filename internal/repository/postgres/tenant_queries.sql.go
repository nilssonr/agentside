// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tenant_queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, last_modified_at, last_modified_by)
    VALUES ($1, $2, $3)
RETURNING
    id, name, last_modified_at, last_modified_by
`

type CreateTenantParams struct {
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type CreateTenantRow struct {
	ID             string
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (CreateTenantRow, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.LastModifiedAt, arg.LastModifiedBy)
	var i CreateTenantRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
UPDATE
    tenants
SET
    deleted_at = $2
WHERE
    deleted_at IS NULL
    AND id = $1
`

type DeleteTenantParams struct {
	ID        string
	DeletedAt pgtype.Timestamptz
}

func (q *Queries) DeleteTenant(ctx context.Context, arg DeleteTenantParams) error {
	_, err := q.db.Exec(ctx, deleteTenant, arg.ID, arg.DeletedAt)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT
    id,
    name,
    last_modified_at,
    last_modified_by
FROM
    tenants
WHERE
    deleted_at IS NULL
    AND id = $1
`

type GetTenantRow struct {
	ID             string
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetTenant(ctx context.Context, id string) (GetTenantRow, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i GetTenantRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}

const getTenants = `-- name: GetTenants :many
SELECT
    id,
    name,
    last_modified_at,
    last_modified_by
FROM
    tenants
WHERE
    deleted_at IS NULL
`

type GetTenantsRow struct {
	ID             string
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) GetTenants(ctx context.Context) ([]GetTenantsRow, error) {
	rows, err := q.db.Query(ctx, getTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTenantsRow
	for rows.Next() {
		var i GetTenantsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastModifiedAt,
			&i.LastModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE
    tenants
SET
    name = $2,
    last_modified_at = $3,
    last_modified_by = $4
WHERE
    deleted_at IS NULL
    AND id = $1
RETURNING
    id,
    name,
    last_modified_at,
    last_modified_by
`

type UpdateTenantParams struct {
	ID             string
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

type UpdateTenantRow struct {
	ID             string
	Name           string
	LastModifiedAt pgtype.Timestamptz
	LastModifiedBy string
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (UpdateTenantRow, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.LastModifiedAt,
		arg.LastModifiedBy,
	)
	var i UpdateTenantRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastModifiedAt,
		&i.LastModifiedBy,
	)
	return i, err
}
