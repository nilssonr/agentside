// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CustomerPhoneNumberType.
const (
	Home   CustomerPhoneNumberType = "home"
	Mobile CustomerPhoneNumberType = "mobile"
	Office CustomerPhoneNumberType = "office"
)

// Defines values for InteractionState.
const (
	Ended    InteractionState = "ended"
	Handling InteractionState = "handling"
	Held     InteractionState = "held"
	Queued   InteractionState = "queued"
)

// Defines values for InteractionType.
const (
	Chat       InteractionType = "chat"
	Email      InteractionType = "email"
	ThirdParty InteractionType = "third_party"
	Voice      InteractionType = "voice"
)

// Customer Customer
type Customer struct {
	FirstName      string             `json:"firstName"`
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt time.Time          `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID `json:"lastModifiedBy"`
	LastName       string             `json:"lastName"`
	TenantId       openapi_types.UUID `json:"tenantId"`
}

// CustomerEmailAddress Customer email address
type CustomerEmailAddress struct {
	CustomerId     openapi_types.UUID `json:"customerId"`
	EmailAddress   string             `json:"emailAddress"`
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt time.Time          `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID `json:"lastModifiedBy"`
	Type           string             `json:"type"`
}

// CustomerNote Customer note
type CustomerNote struct {
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt time.Time          `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID `json:"lastModifiedBy"`
	Note           string             `json:"note"`
}

// CustomerPhoneNumber Customer phone number
type CustomerPhoneNumber struct {
	CustomerId     openapi_types.UUID      `json:"customerId"`
	Id             openapi_types.UUID      `json:"id"`
	LastModifiedAt time.Time               `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID      `json:"lastModifiedBy"`
	PhoneNumber    string                  `json:"phoneNumber"`
	Type           CustomerPhoneNumberType `json:"type"`
}

// CustomerPhoneNumberType defines model for CustomerPhoneNumber.Type.
type CustomerPhoneNumberType string

// Interaction Interaction
type Interaction struct {
	CreatedAt       time.Time          `json:"createdAt"`
	Id              openapi_types.UUID `json:"id"`
	QueueId         openapi_types.UUID `json:"queueId"`
	State           InteractionState   `json:"state"`
	StateModifiedAt time.Time          `json:"stateModifiedAt"`
	TenantId        openapi_types.UUID `json:"tenantId"`
	Type            InteractionType    `json:"type"`
	UserId          openapi_types.UUID `json:"userId"`
}

// InteractionState defines model for Interaction.State.
type InteractionState string

// InteractionType defines model for Interaction.Type.
type InteractionType string

// InteractionNote Interaction note
type InteractionNote struct {
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt time.Time          `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID `json:"lastModifiedBy"`
	Note           string             `json:"note"`
}

// Queue defines model for Queue.
type Queue struct {
	Id             openapi_types.UUID  `json:"id"`
	LastModifiedAt time.Time           `json:"lastModifiedAt"`
	LastModifiedBy *openapi_types.UUID `json:"lastModifiedBy,omitempty"`
	Name           string              `json:"name"`
}

// QueueSkill Queue skill
type QueueSkill struct {
	Choice int                `json:"choice"`
	Id     openapi_types.UUID `json:"id"`
	Level  int                `json:"level"`
	Name   string             `json:"name"`
}

// Skill Skill
type Skill struct {
	Id             openapi_types.UUID `json:"id"`
	LastModifiedAt time.Time          `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID `json:"lastModifiedBy"`
	Name           string             `json:"name"`
	TenantId       openapi_types.UUID `json:"tenantId"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	Id             openapi_types.UUID  `json:"id"`
	LastModifiedAt time.Time           `json:"lastModifiedAt"`
	LastModifiedBy *openapi_types.UUID `json:"lastModifiedBy,omitempty"`
	Name           string              `json:"name"`
}

// User defines model for User.
type User struct {
	EmailAddress   openapi_types.Email `json:"emailAddress"`
	FirstName      string              `json:"firstName"`
	Id             openapi_types.UUID  `json:"id"`
	LastModifiedAt time.Time           `json:"lastModifiedAt"`
	LastModifiedBy openapi_types.UUID  `json:"lastModifiedBy"`
	LastName       string              `json:"lastName"`
	TenantId       openapi_types.UUID  `json:"tenantId"`
}

// UserSkill User skill
type UserSkill struct {
	Id    openapi_types.UUID `json:"id"`
	Level int                `json:"level"`
	Name  string             `json:"name"`
}

// CreateCustomerEmailAddressRequest defines model for CreateCustomerEmailAddressRequest.
type CreateCustomerEmailAddressRequest struct {
	EmailAddress string `json:"emailAddress"`
	Type         string `json:"type"`
}

// CreateCustomerNoteRequest defines model for CreateCustomerNoteRequest.
type CreateCustomerNoteRequest struct {
	Note string `json:"note"`
}

// CreateCustomerPhoneNumberRequest defines model for CreateCustomerPhoneNumberRequest.
type CreateCustomerPhoneNumberRequest struct {
	PhoneNumber string `json:"phoneNumber"`
	Type        string `json:"type"`
}

// CreateCustomerRequest defines model for CreateCustomerRequest.
type CreateCustomerRequest struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// CreateInteractionNoteRequest defines model for CreateInteractionNoteRequest.
type CreateInteractionNoteRequest struct {
	Note string `json:"note"`
}

// CreateInteractionRequest defines model for CreateInteractionRequest.
type CreateInteractionRequest struct {
	QueueId openapi_types.UUID `json:"queueId"`
	Type    string             `json:"type"`
}

// CreateQueueRequest defines model for CreateQueueRequest.
type CreateQueueRequest struct {
	Name string `json:"name"`
}

// CreateSkillRequest defines model for CreateSkillRequest.
type CreateSkillRequest struct {
	Name string `json:"name"`
}

// CreateTenantRequest defines model for CreateTenantRequest.
type CreateTenantRequest struct {
	Name string `json:"name"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	EmailAddress openapi_types.Email `json:"emailAddress"`
	FirstName    string              `json:"firstName"`
	LastName     string              `json:"lastName"`
}

// UpdateCustomerEmailAddressRequest defines model for UpdateCustomerEmailAddressRequest.
type UpdateCustomerEmailAddressRequest struct {
	EmailAddress string `json:"emailAddress"`
	Type         string `json:"type"`
}

// UpdateCustomerNoteRequest defines model for UpdateCustomerNoteRequest.
type UpdateCustomerNoteRequest struct {
	Note string `json:"note"`
}

// UpdateCustomerPhoneNumberRequest defines model for UpdateCustomerPhoneNumberRequest.
type UpdateCustomerPhoneNumberRequest struct {
	PhoneNumber string `json:"phoneNumber"`
	Type        string `json:"type"`
}

// UpdateCustomerRequest defines model for UpdateCustomerRequest.
type UpdateCustomerRequest struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// UpdateInteractionNoteRequest defines model for UpdateInteractionNoteRequest.
type UpdateInteractionNoteRequest struct {
	Note string `json:"note"`
}

// UpdateQueueRequest defines model for UpdateQueueRequest.
type UpdateQueueRequest struct {
	Name string `json:"name"`
}

// UpdateSkillRequest defines model for UpdateSkillRequest.
type UpdateSkillRequest struct {
	Name string `json:"name"`
}

// UpdateTenantRequest defines model for UpdateTenantRequest.
type UpdateTenantRequest struct {
	Name string `json:"name"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// UpsertQueueSkillRequest defines model for UpsertQueueSkillRequest.
type UpsertQueueSkillRequest struct {
	Choice  int                `json:"choice"`
	Level   int                `json:"level"`
	SkillId openapi_types.UUID `json:"skillId"`
}

// UpsertUserSkillRequest defines model for UpsertUserSkillRequest.
type UpsertUserSkillRequest struct {
	Level   int                `json:"level"`
	SkillId openapi_types.UUID `json:"skillId"`
}

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	EmailAddress *string `form:"emailAddress,omitempty" json:"emailAddress,omitempty"`
	PhoneNumber  *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty"`
}

// CreateCustomerJSONBody defines parameters for CreateCustomer.
type CreateCustomerJSONBody struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// UpdateCustomerJSONBody defines parameters for UpdateCustomer.
type UpdateCustomerJSONBody struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// CreateCustomerEmailAddressJSONBody defines parameters for CreateCustomerEmailAddress.
type CreateCustomerEmailAddressJSONBody struct {
	EmailAddress string `json:"emailAddress"`
	Type         string `json:"type"`
}

// UpdateCustomerEmailAddressJSONBody defines parameters for UpdateCustomerEmailAddress.
type UpdateCustomerEmailAddressJSONBody struct {
	EmailAddress string `json:"emailAddress"`
	Type         string `json:"type"`
}

// CreateCustomerNoteJSONBody defines parameters for CreateCustomerNote.
type CreateCustomerNoteJSONBody struct {
	Note string `json:"note"`
}

// UpdateCustomerNoteJSONBody defines parameters for UpdateCustomerNote.
type UpdateCustomerNoteJSONBody struct {
	Note string `json:"note"`
}

// CreateCustomerPhoneNumberJSONBody defines parameters for CreateCustomerPhoneNumber.
type CreateCustomerPhoneNumberJSONBody struct {
	PhoneNumber string `json:"phoneNumber"`
	Type        string `json:"type"`
}

// UpdateCustomerPhoneNumberJSONBody defines parameters for UpdateCustomerPhoneNumber.
type UpdateCustomerPhoneNumberJSONBody struct {
	PhoneNumber string `json:"phoneNumber"`
	Type        string `json:"type"`
}

// CreateInteractionJSONBody defines parameters for CreateInteraction.
type CreateInteractionJSONBody struct {
	QueueId openapi_types.UUID `json:"queueId"`
	Type    string             `json:"type"`
}

// CreateInteractionNoteJSONBody defines parameters for CreateInteractionNote.
type CreateInteractionNoteJSONBody struct {
	Note string `json:"note"`
}

// UpdateInteractionNoteJSONBody defines parameters for UpdateInteractionNote.
type UpdateInteractionNoteJSONBody struct {
	Note string `json:"note"`
}

// CreateQueueJSONBody defines parameters for CreateQueue.
type CreateQueueJSONBody struct {
	Name string `json:"name"`
}

// UpdateQueueJSONBody defines parameters for UpdateQueue.
type UpdateQueueJSONBody struct {
	Name string `json:"name"`
}

// UpsertQueueSkillJSONBody defines parameters for UpsertQueueSkill.
type UpsertQueueSkillJSONBody struct {
	Choice  int                `json:"choice"`
	Level   int                `json:"level"`
	SkillId openapi_types.UUID `json:"skillId"`
}

// CreateSkillJSONBody defines parameters for CreateSkill.
type CreateSkillJSONBody struct {
	Name string `json:"name"`
}

// UpdateSkillJSONBody defines parameters for UpdateSkill.
type UpdateSkillJSONBody struct {
	Name string `json:"name"`
}

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody struct {
	Name string `json:"name"`
}

// UpdateTenantJSONBody defines parameters for UpdateTenant.
type UpdateTenantJSONBody struct {
	Name string `json:"name"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	EmailAddress openapi_types.Email `json:"emailAddress"`
	FirstName    string              `json:"firstName"`
	LastName     string              `json:"lastName"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

// UpsertUserSkillJSONBody defines parameters for UpsertUserSkill.
type UpsertUserSkillJSONBody struct {
	Level   int                `json:"level"`
	SkillId openapi_types.UUID `json:"skillId"`
}

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody CreateCustomerJSONBody

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody UpdateCustomerJSONBody

// CreateCustomerEmailAddressJSONRequestBody defines body for CreateCustomerEmailAddress for application/json ContentType.
type CreateCustomerEmailAddressJSONRequestBody CreateCustomerEmailAddressJSONBody

// UpdateCustomerEmailAddressJSONRequestBody defines body for UpdateCustomerEmailAddress for application/json ContentType.
type UpdateCustomerEmailAddressJSONRequestBody UpdateCustomerEmailAddressJSONBody

// CreateCustomerNoteJSONRequestBody defines body for CreateCustomerNote for application/json ContentType.
type CreateCustomerNoteJSONRequestBody CreateCustomerNoteJSONBody

// UpdateCustomerNoteJSONRequestBody defines body for UpdateCustomerNote for application/json ContentType.
type UpdateCustomerNoteJSONRequestBody UpdateCustomerNoteJSONBody

// CreateCustomerPhoneNumberJSONRequestBody defines body for CreateCustomerPhoneNumber for application/json ContentType.
type CreateCustomerPhoneNumberJSONRequestBody CreateCustomerPhoneNumberJSONBody

// UpdateCustomerPhoneNumberJSONRequestBody defines body for UpdateCustomerPhoneNumber for application/json ContentType.
type UpdateCustomerPhoneNumberJSONRequestBody UpdateCustomerPhoneNumberJSONBody

// CreateInteractionJSONRequestBody defines body for CreateInteraction for application/json ContentType.
type CreateInteractionJSONRequestBody CreateInteractionJSONBody

// CreateInteractionNoteJSONRequestBody defines body for CreateInteractionNote for application/json ContentType.
type CreateInteractionNoteJSONRequestBody CreateInteractionNoteJSONBody

// UpdateInteractionNoteJSONRequestBody defines body for UpdateInteractionNote for application/json ContentType.
type UpdateInteractionNoteJSONRequestBody UpdateInteractionNoteJSONBody

// CreateQueueJSONRequestBody defines body for CreateQueue for application/json ContentType.
type CreateQueueJSONRequestBody CreateQueueJSONBody

// UpdateQueueJSONRequestBody defines body for UpdateQueue for application/json ContentType.
type UpdateQueueJSONRequestBody UpdateQueueJSONBody

// UpsertQueueSkillJSONRequestBody defines body for UpsertQueueSkill for application/json ContentType.
type UpsertQueueSkillJSONRequestBody UpsertQueueSkillJSONBody

// CreateSkillJSONRequestBody defines body for CreateSkill for application/json ContentType.
type CreateSkillJSONRequestBody CreateSkillJSONBody

// UpdateSkillJSONRequestBody defines body for UpdateSkill for application/json ContentType.
type UpdateSkillJSONRequestBody UpdateSkillJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// UpdateTenantJSONRequestBody defines body for UpdateTenant for application/json ContentType.
type UpdateTenantJSONRequestBody UpdateTenantJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// UpsertUserSkillJSONRequestBody defines body for UpsertUserSkill for application/json ContentType.
type UpsertUserSkillJSONRequestBody UpsertUserSkillJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get customers
	// (GET /api/customers)
	GetCustomers(w http.ResponseWriter, r *http.Request, params GetCustomersParams)
	// Create customer
	// (POST /api/customers)
	CreateCustomer(w http.ResponseWriter, r *http.Request)
	// Delete customer
	// (DELETE /api/customers/{customerId})
	DeleteCustomer(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Get customer
	// (GET /api/customers/{customerId})
	GetCustomer(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Update customer
	// (PUT /api/customers/{customerId})
	UpdateCustomer(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Get customer email address
	// (GET /api/customers/{customerId}/email-addresses)
	GetCustomerEmailAddresses(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Create customer email address
	// (POST /api/customers/{customerId}/email-addresses)
	CreateCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Delete customer email address
	// (DELETE /api/customers/{customerId}/email-addresses/{emailAddressId})
	DeleteCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, emailAddressId openapi_types.UUID)
	// Get customer email address
	// (GET /api/customers/{customerId}/email-addresses/{emailAddressId})
	GetCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, emailAddressId openapi_types.UUID)
	// Update customer email address
	// (PUT /api/customers/{customerId}/email-addresses/{emailAddressId})
	UpdateCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, emailAddressId openapi_types.UUID)
	// Get customer notes
	// (GET /api/customers/{customerId}/notes)
	GetCustomerNotes(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Create customer note
	// (POST /api/customers/{customerId}/notes)
	CreateCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Delete customer note
	// (DELETE /api/customers/{customerId}/notes/{noteId})
	DeleteCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, noteId openapi_types.UUID)
	// Get customer note
	// (GET /api/customers/{customerId}/notes/{noteId})
	GetCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, noteId openapi_types.UUID)
	// Update customer note
	// (PUT /api/customers/{customerId}/notes/{noteId})
	UpdateCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, noteId openapi_types.UUID)
	// Get customer phone numbers
	// (GET /api/customers/{customerId}/phone-numbers)
	GetCustomerPhoneNumbers(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Create customer phone number
	// (POST /api/customers/{customerId}/phone-numbers)
	CreateCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID)
	// Delete customer phone number
	// (DELETE /api/customers/{customerId}/phone-numbers/{phoneNumberId})
	DeleteCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, phoneNumberId openapi_types.UUID)
	// Get customer phone number
	// (GET /api/customers/{customerId}/phone-numbers/{phoneNumberId})
	GetCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, phoneNumberId openapi_types.UUID)
	// Update customer phone number
	// (PUT /api/customers/{customerId}/phone-numbers/{phoneNumberId})
	UpdateCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, phoneNumberId openapi_types.UUID)
	// Get interactions
	// (GET /api/interactions)
	GetInteractions(w http.ResponseWriter, r *http.Request)
	// Create interaction
	// (POST /api/interactions)
	CreateInteraction(w http.ResponseWriter, r *http.Request)
	// Get interaction
	// (GET /api/interactions/{interactionId})
	GetInteraction(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID)
	// Get interaction notes
	// (GET /api/interactions/{interactionId}/notes)
	GetInteractionNotes(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID)
	// Create interaction note
	// (POST /api/interactions/{interactionId}/notes)
	CreateInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID)
	// Delete interaction note
	// (DELETE /api/interactions/{interactionId}/notes/{noteId})
	DeleteInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID, noteId openapi_types.UUID)
	// Get interaction note
	// (GET /api/interactions/{interactionId}/notes/{noteId})
	GetInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID, noteId openapi_types.UUID)
	// Update interaction note
	// (PUT /api/interactions/{interactionId}/notes/{noteId})
	UpdateInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID, noteId openapi_types.UUID)
	// Get queues
	// (GET /api/queues)
	GetQueues(w http.ResponseWriter, r *http.Request)
	// Create queue
	// (POST /api/queues)
	CreateQueue(w http.ResponseWriter, r *http.Request)
	// Delete queue
	// (DELETE /api/queues/{queueId})
	DeleteQueue(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID)
	// Get queue
	// (GET /api/queues/{queueId})
	GetQueue(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID)
	// Update queue
	// (PUT /api/queues/{queueId})
	UpdateQueue(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID)
	// Get queue interactions
	// (GET /api/queues/{queueId}/interactions)
	GetQueueInteractions(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID)
	// Get queue skills
	// (GET /api/queues/{queueId}/skills)
	GetQueueSkills(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID)
	// Upsert a skill
	// (PUT /api/queues/{queueId}/skills)
	UpsertQueueSkill(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID)
	// Delete queue skill
	// (DELETE /api/queues/{queueId}/skills/{skillId})
	DeleteQueueSkill(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID, skillId openapi_types.UUID)
	// Get queue skill
	// (GET /api/queues/{queueId}/skills/{skillId})
	GetQueueSkill(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID, skillId openapi_types.UUID)
	// Get skills
	// (GET /api/skills)
	GetSkills(w http.ResponseWriter, r *http.Request)
	// Create skill
	// (POST /api/skills)
	CreateSkill(w http.ResponseWriter, r *http.Request)
	// Delete skill
	// (DELETE /api/skills/{skillId})
	DeleteSkill(w http.ResponseWriter, r *http.Request, skillId openapi_types.UUID)
	// Get skill
	// (GET /api/skills/{skillId})
	GetSkill(w http.ResponseWriter, r *http.Request, skillId openapi_types.UUID)
	// Update skill
	// (PUT /api/skills/{skillId})
	UpdateSkill(w http.ResponseWriter, r *http.Request, skillId openapi_types.UUID)
	// Get tenants
	// (GET /api/tenants)
	GetTenants(w http.ResponseWriter, r *http.Request)
	// Create tenant
	// (POST /api/tenants)
	CreateTenant(w http.ResponseWriter, r *http.Request)
	// Delete tenant
	// (DELETE /api/tenants/{tenantId})
	DeleteTenant(w http.ResponseWriter, r *http.Request, tenantId openapi_types.UUID)
	// Get tenant
	// (GET /api/tenants/{tenantId})
	GetTenant(w http.ResponseWriter, r *http.Request, tenantId openapi_types.UUID)
	// Update tenant
	// (PUT /api/tenants/{tenantId})
	UpdateTenant(w http.ResponseWriter, r *http.Request, tenantId openapi_types.UUID)
	// Get users
	// (GET /api/users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Create user
	// (POST /api/users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /api/users/{userId})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get user
	// (GET /api/users/{userId})
	GetUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update user
	// (PUT /api/users/{userId})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get user skills
	// (GET /api/users/{userId}/skills)
	GetUserSkills(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Upsert a skill
	// (PUT /api/users/{userId}/skills)
	UpsertUserSkill(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Delete user skill
	// (DELETE /api/users/{userId}/skills/{skillId})
	DeleteUserSkill(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, skillId openapi_types.UUID)
	// Get user skill
	// (GET /api/users/{userId}/skills/{skillId})
	GetUserSkill(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, skillId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get customers
// (GET /api/customers)
func (_ Unimplemented) GetCustomers(w http.ResponseWriter, r *http.Request, params GetCustomersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create customer
// (POST /api/customers)
func (_ Unimplemented) CreateCustomer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer
// (DELETE /api/customers/{customerId})
func (_ Unimplemented) DeleteCustomer(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer
// (GET /api/customers/{customerId})
func (_ Unimplemented) GetCustomer(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update customer
// (PUT /api/customers/{customerId})
func (_ Unimplemented) UpdateCustomer(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer email address
// (GET /api/customers/{customerId}/email-addresses)
func (_ Unimplemented) GetCustomerEmailAddresses(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create customer email address
// (POST /api/customers/{customerId}/email-addresses)
func (_ Unimplemented) CreateCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer email address
// (DELETE /api/customers/{customerId}/email-addresses/{emailAddressId})
func (_ Unimplemented) DeleteCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, emailAddressId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer email address
// (GET /api/customers/{customerId}/email-addresses/{emailAddressId})
func (_ Unimplemented) GetCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, emailAddressId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update customer email address
// (PUT /api/customers/{customerId}/email-addresses/{emailAddressId})
func (_ Unimplemented) UpdateCustomerEmailAddress(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, emailAddressId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer notes
// (GET /api/customers/{customerId}/notes)
func (_ Unimplemented) GetCustomerNotes(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create customer note
// (POST /api/customers/{customerId}/notes)
func (_ Unimplemented) CreateCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer note
// (DELETE /api/customers/{customerId}/notes/{noteId})
func (_ Unimplemented) DeleteCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, noteId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer note
// (GET /api/customers/{customerId}/notes/{noteId})
func (_ Unimplemented) GetCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, noteId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update customer note
// (PUT /api/customers/{customerId}/notes/{noteId})
func (_ Unimplemented) UpdateCustomerNote(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, noteId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer phone numbers
// (GET /api/customers/{customerId}/phone-numbers)
func (_ Unimplemented) GetCustomerPhoneNumbers(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create customer phone number
// (POST /api/customers/{customerId}/phone-numbers)
func (_ Unimplemented) CreateCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete customer phone number
// (DELETE /api/customers/{customerId}/phone-numbers/{phoneNumberId})
func (_ Unimplemented) DeleteCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, phoneNumberId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get customer phone number
// (GET /api/customers/{customerId}/phone-numbers/{phoneNumberId})
func (_ Unimplemented) GetCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, phoneNumberId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update customer phone number
// (PUT /api/customers/{customerId}/phone-numbers/{phoneNumberId})
func (_ Unimplemented) UpdateCustomerPhoneNumber(w http.ResponseWriter, r *http.Request, customerId openapi_types.UUID, phoneNumberId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get interactions
// (GET /api/interactions)
func (_ Unimplemented) GetInteractions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create interaction
// (POST /api/interactions)
func (_ Unimplemented) CreateInteraction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get interaction
// (GET /api/interactions/{interactionId})
func (_ Unimplemented) GetInteraction(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get interaction notes
// (GET /api/interactions/{interactionId}/notes)
func (_ Unimplemented) GetInteractionNotes(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create interaction note
// (POST /api/interactions/{interactionId}/notes)
func (_ Unimplemented) CreateInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete interaction note
// (DELETE /api/interactions/{interactionId}/notes/{noteId})
func (_ Unimplemented) DeleteInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID, noteId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get interaction note
// (GET /api/interactions/{interactionId}/notes/{noteId})
func (_ Unimplemented) GetInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID, noteId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update interaction note
// (PUT /api/interactions/{interactionId}/notes/{noteId})
func (_ Unimplemented) UpdateInteractionNote(w http.ResponseWriter, r *http.Request, interactionId openapi_types.UUID, noteId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get queues
// (GET /api/queues)
func (_ Unimplemented) GetQueues(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create queue
// (POST /api/queues)
func (_ Unimplemented) CreateQueue(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete queue
// (DELETE /api/queues/{queueId})
func (_ Unimplemented) DeleteQueue(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get queue
// (GET /api/queues/{queueId})
func (_ Unimplemented) GetQueue(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update queue
// (PUT /api/queues/{queueId})
func (_ Unimplemented) UpdateQueue(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get queue interactions
// (GET /api/queues/{queueId}/interactions)
func (_ Unimplemented) GetQueueInteractions(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get queue skills
// (GET /api/queues/{queueId}/skills)
func (_ Unimplemented) GetQueueSkills(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upsert a skill
// (PUT /api/queues/{queueId}/skills)
func (_ Unimplemented) UpsertQueueSkill(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete queue skill
// (DELETE /api/queues/{queueId}/skills/{skillId})
func (_ Unimplemented) DeleteQueueSkill(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get queue skill
// (GET /api/queues/{queueId}/skills/{skillId})
func (_ Unimplemented) GetQueueSkill(w http.ResponseWriter, r *http.Request, queueId openapi_types.UUID, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get skills
// (GET /api/skills)
func (_ Unimplemented) GetSkills(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create skill
// (POST /api/skills)
func (_ Unimplemented) CreateSkill(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete skill
// (DELETE /api/skills/{skillId})
func (_ Unimplemented) DeleteSkill(w http.ResponseWriter, r *http.Request, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get skill
// (GET /api/skills/{skillId})
func (_ Unimplemented) GetSkill(w http.ResponseWriter, r *http.Request, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update skill
// (PUT /api/skills/{skillId})
func (_ Unimplemented) UpdateSkill(w http.ResponseWriter, r *http.Request, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tenants
// (GET /api/tenants)
func (_ Unimplemented) GetTenants(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create tenant
// (POST /api/tenants)
func (_ Unimplemented) CreateTenant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete tenant
// (DELETE /api/tenants/{tenantId})
func (_ Unimplemented) DeleteTenant(w http.ResponseWriter, r *http.Request, tenantId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tenant
// (GET /api/tenants/{tenantId})
func (_ Unimplemented) GetTenant(w http.ResponseWriter, r *http.Request, tenantId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update tenant
// (PUT /api/tenants/{tenantId})
func (_ Unimplemented) UpdateTenant(w http.ResponseWriter, r *http.Request, tenantId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get users
// (GET /api/users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create user
// (POST /api/users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /api/users/{userId})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user
// (GET /api/users/{userId})
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /api/users/{userId})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user skills
// (GET /api/users/{userId}/skills)
func (_ Unimplemented) GetUserSkills(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upsert a skill
// (PUT /api/users/{userId}/skills)
func (_ Unimplemented) UpsertUserSkill(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user skill
// (DELETE /api/users/{userId}/skills/{skillId})
func (_ Unimplemented) DeleteUserSkill(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user skill
// (GET /api/users/{userId}/skills/{skillId})
func (_ Unimplemented) GetUserSkill(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, skillId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCustomers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomersParams

	// ------------- Optional query parameter "emailAddress" -------------

	err = runtime.BindQueryParameter("form", true, false, "emailAddress", r.URL.Query(), &params.EmailAddress)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "emailAddress", Err: err})
		return
	}

	// ------------- Optional query parameter "phoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "phoneNumber", r.URL.Query(), &params.PhoneNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "phoneNumber", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCustomer operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCustomer operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomer(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomer operation middleware
func (siw *ServerInterfaceWrapper) GetCustomer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomer(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCustomer operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomer(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomerEmailAddresses operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerEmailAddresses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerEmailAddresses(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCustomerEmailAddress operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomerEmailAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomerEmailAddress(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCustomerEmailAddress operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomerEmailAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "emailAddressId" -------------
	var emailAddressId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddressId", runtime.ParamLocationPath, chi.URLParam(r, "emailAddressId"), &emailAddressId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "emailAddressId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomerEmailAddress(w, r, customerId, emailAddressId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomerEmailAddress operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerEmailAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "emailAddressId" -------------
	var emailAddressId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddressId", runtime.ParamLocationPath, chi.URLParam(r, "emailAddressId"), &emailAddressId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "emailAddressId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerEmailAddress(w, r, customerId, emailAddressId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCustomerEmailAddress operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomerEmailAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "emailAddressId" -------------
	var emailAddressId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailAddressId", runtime.ParamLocationPath, chi.URLParam(r, "emailAddressId"), &emailAddressId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "emailAddressId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomerEmailAddress(w, r, customerId, emailAddressId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomerNotes operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerNotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerNotes(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCustomerNote operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomerNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomerNote(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCustomerNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomerNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "noteId" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, chi.URLParam(r, "noteId"), &noteId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomerNote(w, r, customerId, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomerNote operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "noteId" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, chi.URLParam(r, "noteId"), &noteId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerNote(w, r, customerId, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCustomerNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomerNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "noteId" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, chi.URLParam(r, "noteId"), &noteId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomerNote(w, r, customerId, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomerPhoneNumbers operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerPhoneNumbers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerPhoneNumbers(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCustomerPhoneNumber operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomerPhoneNumber(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomerPhoneNumber(w, r, customerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCustomerPhoneNumber operation middleware
func (siw *ServerInterfaceWrapper) DeleteCustomerPhoneNumber(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "phoneNumberId" -------------
	var phoneNumberId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "phoneNumberId", runtime.ParamLocationPath, chi.URLParam(r, "phoneNumberId"), &phoneNumberId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "phoneNumberId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCustomerPhoneNumber(w, r, customerId, phoneNumberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCustomerPhoneNumber operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerPhoneNumber(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "phoneNumberId" -------------
	var phoneNumberId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "phoneNumberId", runtime.ParamLocationPath, chi.URLParam(r, "phoneNumberId"), &phoneNumberId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "phoneNumberId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerPhoneNumber(w, r, customerId, phoneNumberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCustomerPhoneNumber operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomerPhoneNumber(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, chi.URLParam(r, "customerId"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customerId", Err: err})
		return
	}

	// ------------- Path parameter "phoneNumberId" -------------
	var phoneNumberId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "phoneNumberId", runtime.ParamLocationPath, chi.URLParam(r, "phoneNumberId"), &phoneNumberId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "phoneNumberId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomerPhoneNumber(w, r, customerId, phoneNumberId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInteractions operation middleware
func (siw *ServerInterfaceWrapper) GetInteractions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInteractions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateInteraction operation middleware
func (siw *ServerInterfaceWrapper) CreateInteraction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateInteraction(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInteraction operation middleware
func (siw *ServerInterfaceWrapper) GetInteraction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "interactionId" -------------
	var interactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, chi.URLParam(r, "interactionId"), &interactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interactionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInteraction(w, r, interactionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInteractionNotes operation middleware
func (siw *ServerInterfaceWrapper) GetInteractionNotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "interactionId" -------------
	var interactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, chi.URLParam(r, "interactionId"), &interactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interactionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInteractionNotes(w, r, interactionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateInteractionNote operation middleware
func (siw *ServerInterfaceWrapper) CreateInteractionNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "interactionId" -------------
	var interactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, chi.URLParam(r, "interactionId"), &interactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interactionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateInteractionNote(w, r, interactionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInteractionNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteInteractionNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "interactionId" -------------
	var interactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, chi.URLParam(r, "interactionId"), &interactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interactionId", Err: err})
		return
	}

	// ------------- Path parameter "noteId" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, chi.URLParam(r, "noteId"), &noteId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInteractionNote(w, r, interactionId, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInteractionNote operation middleware
func (siw *ServerInterfaceWrapper) GetInteractionNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "interactionId" -------------
	var interactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, chi.URLParam(r, "interactionId"), &interactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interactionId", Err: err})
		return
	}

	// ------------- Path parameter "noteId" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, chi.URLParam(r, "noteId"), &noteId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInteractionNote(w, r, interactionId, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateInteractionNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateInteractionNote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "interactionId" -------------
	var interactionId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, chi.URLParam(r, "interactionId"), &interactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "interactionId", Err: err})
		return
	}

	// ------------- Path parameter "noteId" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "noteId", runtime.ParamLocationPath, chi.URLParam(r, "noteId"), &noteId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "noteId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInteractionNote(w, r, interactionId, noteId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetQueues operation middleware
func (siw *ServerInterfaceWrapper) GetQueues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQueues(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateQueue operation middleware
func (siw *ServerInterfaceWrapper) CreateQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateQueue(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteQueue operation middleware
func (siw *ServerInterfaceWrapper) DeleteQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteQueue(w, r, queueId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetQueue operation middleware
func (siw *ServerInterfaceWrapper) GetQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQueue(w, r, queueId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateQueue operation middleware
func (siw *ServerInterfaceWrapper) UpdateQueue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateQueue(w, r, queueId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetQueueInteractions operation middleware
func (siw *ServerInterfaceWrapper) GetQueueInteractions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQueueInteractions(w, r, queueId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetQueueSkills operation middleware
func (siw *ServerInterfaceWrapper) GetQueueSkills(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQueueSkills(w, r, queueId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertQueueSkill operation middleware
func (siw *ServerInterfaceWrapper) UpsertQueueSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertQueueSkill(w, r, queueId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteQueueSkill operation middleware
func (siw *ServerInterfaceWrapper) DeleteQueueSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteQueueSkill(w, r, queueId, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetQueueSkill operation middleware
func (siw *ServerInterfaceWrapper) GetQueueSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "queueId" -------------
	var queueId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "queueId", runtime.ParamLocationPath, chi.URLParam(r, "queueId"), &queueId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "queueId", Err: err})
		return
	}

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQueueSkill(w, r, queueId, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSkills operation middleware
func (siw *ServerInterfaceWrapper) GetSkills(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSkills(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSkill operation middleware
func (siw *ServerInterfaceWrapper) CreateSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSkill(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSkill operation middleware
func (siw *ServerInterfaceWrapper) DeleteSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSkill(w, r, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSkill operation middleware
func (siw *ServerInterfaceWrapper) GetSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSkill(w, r, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSkill operation middleware
func (siw *ServerInterfaceWrapper) UpdateSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSkill(w, r, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTenants operation middleware
func (siw *ServerInterfaceWrapper) GetTenants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTenant operation middleware
func (siw *ServerInterfaceWrapper) CreateTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTenant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTenant operation middleware
func (siw *ServerInterfaceWrapper) DeleteTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenantId" -------------
	var tenantId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, chi.URLParam(r, "tenantId"), &tenantId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTenant(w, r, tenantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTenant operation middleware
func (siw *ServerInterfaceWrapper) GetTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenantId" -------------
	var tenantId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, chi.URLParam(r, "tenantId"), &tenantId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenant(w, r, tenantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTenant operation middleware
func (siw *ServerInterfaceWrapper) UpdateTenant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenantId" -------------
	var tenantId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, chi.URLParam(r, "tenantId"), &tenantId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenantId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTenant(w, r, tenantId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserSkills operation middleware
func (siw *ServerInterfaceWrapper) GetUserSkills(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserSkills(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertUserSkill operation middleware
func (siw *ServerInterfaceWrapper) UpsertUserSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertUserSkill(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserSkill operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserSkill(w, r, userId, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserSkill operation middleware
func (siw *ServerInterfaceWrapper) GetUserSkill(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "skillId" -------------
	var skillId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "skillId", runtime.ParamLocationPath, chi.URLParam(r, "skillId"), &skillId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "skillId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserSkill(w, r, userId, skillId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers", wrapper.GetCustomers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/customers", wrapper.CreateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/customers/{customerId}", wrapper.DeleteCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}", wrapper.GetCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/customers/{customerId}", wrapper.UpdateCustomer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}/email-addresses", wrapper.GetCustomerEmailAddresses)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/customers/{customerId}/email-addresses", wrapper.CreateCustomerEmailAddress)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/customers/{customerId}/email-addresses/{emailAddressId}", wrapper.DeleteCustomerEmailAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}/email-addresses/{emailAddressId}", wrapper.GetCustomerEmailAddress)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/customers/{customerId}/email-addresses/{emailAddressId}", wrapper.UpdateCustomerEmailAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}/notes", wrapper.GetCustomerNotes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/customers/{customerId}/notes", wrapper.CreateCustomerNote)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/customers/{customerId}/notes/{noteId}", wrapper.DeleteCustomerNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}/notes/{noteId}", wrapper.GetCustomerNote)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/customers/{customerId}/notes/{noteId}", wrapper.UpdateCustomerNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}/phone-numbers", wrapper.GetCustomerPhoneNumbers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/customers/{customerId}/phone-numbers", wrapper.CreateCustomerPhoneNumber)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/customers/{customerId}/phone-numbers/{phoneNumberId}", wrapper.DeleteCustomerPhoneNumber)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/customers/{customerId}/phone-numbers/{phoneNumberId}", wrapper.GetCustomerPhoneNumber)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/customers/{customerId}/phone-numbers/{phoneNumberId}", wrapper.UpdateCustomerPhoneNumber)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/interactions", wrapper.GetInteractions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/interactions", wrapper.CreateInteraction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/interactions/{interactionId}", wrapper.GetInteraction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/interactions/{interactionId}/notes", wrapper.GetInteractionNotes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/interactions/{interactionId}/notes", wrapper.CreateInteractionNote)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/interactions/{interactionId}/notes/{noteId}", wrapper.DeleteInteractionNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/interactions/{interactionId}/notes/{noteId}", wrapper.GetInteractionNote)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/interactions/{interactionId}/notes/{noteId}", wrapper.UpdateInteractionNote)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/queues", wrapper.GetQueues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/queues", wrapper.CreateQueue)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/queues/{queueId}", wrapper.DeleteQueue)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/queues/{queueId}", wrapper.GetQueue)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/queues/{queueId}", wrapper.UpdateQueue)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/queues/{queueId}/interactions", wrapper.GetQueueInteractions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/queues/{queueId}/skills", wrapper.GetQueueSkills)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/queues/{queueId}/skills", wrapper.UpsertQueueSkill)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/queues/{queueId}/skills/{skillId}", wrapper.DeleteQueueSkill)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/queues/{queueId}/skills/{skillId}", wrapper.GetQueueSkill)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/skills", wrapper.GetSkills)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/skills", wrapper.CreateSkill)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/skills/{skillId}", wrapper.DeleteSkill)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/skills/{skillId}", wrapper.GetSkill)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/skills/{skillId}", wrapper.UpdateSkill)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tenants", wrapper.GetTenants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tenants", wrapper.CreateTenant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/tenants/{tenantId}", wrapper.DeleteTenant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tenants/{tenantId}", wrapper.GetTenant)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tenants/{tenantId}", wrapper.UpdateTenant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{userId}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/{userId}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}/skills", wrapper.GetUserSkills)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/{userId}/skills", wrapper.UpsertUserSkill)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{userId}/skills/{skillId}", wrapper.DeleteUserSkill)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}/skills/{skillId}", wrapper.GetUserSkill)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc3W+cOhb/V0befSRhutuneUuz1SpabTZtt09VtKKDM+O9M0CwiRSN+N+v/AHYYBtj",
	"PkJu71NTxsD5/P2ODwcuYJ+eszSBCcFgdwE5fC4gJp/SGEF24DaHEYG3BSbpGeafzxE63cRxDjH+ypfS",
	"Rfs0ITBhf0ZZdkL7iKA0Cf+P04Qew/sjPEf0ryxPM5gTcW0oXY3+n7xmEOwAJjlKDqAMxIHOD2XA5EQ5",
	"jMHuh3oZcdJjqa4ieQHLoKXNfUrgeC2SlDgIyVY5SfVwTBN4X5x/wny8cFlzsREWlq8yxMDj5X9COSb3",
	"0RlqpT9Fxh9bGjTXkc6y6nCXEJhHeyrluuJEEmy8UM8FLOBdzEyd5ueIgB0oChRXbh4eK+zXoL6wVZUv",
	"dNEElnUKgaTX5d9+Q6fTesT5L0yihKxHnu94ioxug34dduwHXdzNigGBKpDBAN+z+A/Egqo2a0E3Vap3",
	"zYKqKu+TBbkOK2RBLthqqIOLsxrq4OKshzq4PNNQx9ukAYY5YdE2kY/3xxTtZSlRQuAB5kwH+AJP+p8w",
	"vbtTpdbStjqxunpQSWDVmHpsIoWXUEqrC70Bk4nvZAUc079jiPc5yqj4YNf8EgwKOORWNtMI+3caoycE",
	"4xuinEJT44ogFojW8z69Ot/KKC5hmOBjbLbEUD3VV+0o2tHgkVaSmhLK7JANK2o2UV3VtDJJLHPcv/QW",
	"WutzqFthws7V1X+BbKKOAB1NZAfdC542OIYRdNsf67OfW7XBzhUaDbHRg1pWGkzFysZNUtWNo0J4fRZ2",
	"La1hUpyprc/pT3SiNz+mTIb06YlxkRMGaSpwjxCXatqu2+QfO85i2+BBFnV02JA2DCYRUUzKTqZLj1ES",
	"n+iqABzhiYFCEsNYY1xxFZ8YGUAjXe+/sMIjqPf6+2NEiYIcUR7/L4ty8qoVtsCOGaILmlZDqjJg1wT1",
	"fRRWa5zeih09QkoLfm2QZCVztxhcofpOewauflP+6LRl9XI3JNhvG1axdiHFshlwNZW5vPZQrb1FCIBB",
	"q29afd6Ne0fXw4lX/cs35r9MWtBd5Pwt4D83Ypr6f1hc1tv9bqLTnwzo9XYIxff7KHlKuwLfHGBCMIrh",
	"5ubhjsqDyAlqjr/AHPMzPlxvr7dUnDSDSZQhsAN/Z4cCkEXkyHQNowyFVa3JjhwgCyJqENYIoR4F/4Tk",
	"tl5ET8+jMyTsjB8XgOjdnguYv1YK7dqOa7ooHZvoz1eLYvPpj9SmOEsTzJ33t+12UFMHEXhmJ/41h09g",
	"B/4SNqMDoeizhHUrpS7+QJTn0Stg/lL99J9/MUfj4nyO8lduu81eMh6JDtRsoDEoDdUs5d2o1naLlWl4",
	"E9VXAEHLNeqzaRBIww6vJr2UeYhQ/3S77Bj2wyDDutmzaz8uTdwyIj8qW0FnxjJoBXR4afZRJTfvCeoK",
	"3H+w41ZD8yWKoRXzfOxe9T7d3Ap7qerwa/WpE/QmIxgZ/b5Osga5OcY1sEGRqMl6Zder9j1lEOjjl8cA",
	"ZIXGcuoTLJ9c0T8DK9fiBi7euDQJGXRfifYkdCIFufEJMVgSk5We61h87rRmVxDIghhsqP9ZJduRDKAb",
	"BFiCDVRPejKDkweHJUB4kYuZDpHYWKLjGAfG2LswhmOgDsnbJbikz8XvKjkD7cXVWFmAxsYmf/8UULnG",
	"yGhR3RR5n6TEje7u2cIlWY61ZUezWyLkdkocw4MfFMOE0E02rS7enPnueet2JOPJQ0BLMB33pi/DiXa1",
	"b4CHF/rPIBqrrTzVhsemQ+CUfkuwlclN/Unml2PyU5aF0izoepDA3pvzAFqA23zT2zwLWq4pbtoc5p/Z",
	"rF12xR/HO1GY9JR/WSaTxwtGE5o8hfB+tmsPSm9zJHdpRoqXoDDFjb5M1hoiGRv34UXqGg8iuLZHJtum",
	"OWgYDMnVJWivx7XuGbnWLZoSJQuw2Mh8732FoFxhULSpbUCqo6YMslLZnbxuCQqTp6h8qQupQld2UHSR",
	"nwfpeESd5vLkD80Ld3PyhmK7gXyBFH0NJtNFT3iR/icIwSGa5gTZHjv0xYw1ZKbaWyhGG4ePLl7p77u0",
	"5tMWz/ZR3RfUmp3D782HzmA0rhljeClrIVDyasmg7ljkCHQa3J7RmX5sh8ZdpcA1XReC00HdmiFqrjAn",
	"V9q2mQALrC9oliuLJFHkDocBNrZtpbwvfMUSRMdnmn3p7bkStFJZSN5XxPK7erOF8qbsnBwhrDOQGZ6F",
	"dh2jqBEQXsQAvwPaNwYbi/Ft4fj4rh3TDXffzm9nc9QZgs4G13xqvQ8om7cq5kJK7+jXvCdersIrAgsH",
	"B77zdp9d6V3u+Z950Ol3/ubInSswjZ5g49D9PvjGl80Ydc3c9jAT40qytzOuMevVF+79Ul//0n65WJEg",
	"fOKRBlz2TVSP3LvjA3dqeBEvxzuO8WKUHE5QjgvDQG/LJ5Nwq1nLmmDVq36FJEfwxVVyJRNnJ2XvTHzL",
	"RNR3/psPLEyAn/1wOQ1SOuWnf2pSp3WAU0ju8maCPkSlb4/5F/k9MDddkW8McWuR3w7y2mhqhAyGLgta",
	"TQdURuEDezjPCTfDkMaiQT/GTIIE1hJ/BM/H/bE/bbE1pMLvjXoitpMWYKx2nEsgo3g51RcaSS2qbrts",
	"63CIG3ujn/q5qznhrzLRQPwjlYJdy7RiIbxUb246NDoku40FOYuEQU9wzolzZntbQtAUgbZ2B1/Y2++Q",
	"XqudCw39k0H37bdyHc4RiOiQBwXumcv7jpcaxON474mGBVYH7bjYfUjIbumNg/Jn9uZEQRMRWjGwwMo8",
	"S2UPxe/hhX+CxQH7akuNRT6DXIE1AMEayowqzPRR1lvY1V+7mQvJfIO5+83INVV1g+LYYetbt/BW1igs",
	"6u8+4DUGmPKRSv8mYec7l+VqnGDsBDqFnGcbsJC/9mHC3en21srtjBDc2wK0SC1n2FoT7O3ya87mH1UY",
	"5i+VAkV+AjtwJCTDu5DG7XVUfZDlOsoyQGXprLnCJDqg5GBduwvDU7qPTscUk93H7XYLKG4Ii1YfMa5L",
	"TXquONTM1EoHBRZLR7hPpAOiRysdUZ62lY/l7wEAAP//Mt7YPlhlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
